// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KinesisLoadTestingWithLocustStack Snapshot test 1`] = `
Object {
  "Conditions": Object {
    "AwsCdkKinesisEncryptedStreamsUnsupportedRegions": Object {
      "Fn::Or": Array [
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AWS::Region",
            },
            "cn-north-1",
          ],
        },
        Object {
          "Fn::Equals": Array [
            Object {
              "Ref": "AWS::Region",
            },
            "cn-northwest-1",
          ],
        },
      ],
    },
  },
  "Outputs": Object {
    "locustdashboardurl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "kinesisloadtestingwithlocustinstance56EDDEC9",
                "PublicIp",
              ],
            },
            ":8089",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "DemoStream7DBE9115": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Name": "DemoStream",
        "RetentionPeriodHours": 24,
        "StreamEncryption": Object {
          "Fn::If": Array [
            "AwsCdkKinesisEncryptedStreamsUnsupportedRegions",
            Object {
              "Ref": "AWS::NoValue",
            },
            Object {
              "EncryptionType": "KMS",
              "KeyId": "alias/aws/kinesis",
            },
          ],
        },
        "StreamModeDetails": Object {
          "StreamMode": "ON_DEMAND",
        },
      },
      "Type": "AWS::Kinesis::Stream",
      "UpdateReplacePolicy": "Delete",
    },
    "LoadtestingVPC470E256F": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "KinesisLoadTestingWithLocustStack/Load testing VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "LoadtestingVPCIGW333C72B1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "KinesisLoadTestingWithLocustStack/Load testing VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "LoadtestingVPCPublicSubnetSubnet1DefaultRoute60072BA0": Object {
      "DependsOn": Array [
        "LoadtestingVPCVPCGWE9D04917",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "LoadtestingVPCIGW333C72B1",
        },
        "RouteTableId": Object {
          "Ref": "LoadtestingVPCPublicSubnetSubnet1RouteTable5C7991F4",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "LoadtestingVPCPublicSubnetSubnet1RouteTable5C7991F4": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "KinesisLoadTestingWithLocustStack/Load testing VPC/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "LoadtestingVPC470E256F",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "LoadtestingVPCPublicSubnetSubnet1RouteTableAssociation828D98D2": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "LoadtestingVPCPublicSubnetSubnet1RouteTable5C7991F4",
        },
        "SubnetId": Object {
          "Ref": "LoadtestingVPCPublicSubnetSubnet1SubnetE102A8F4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "LoadtestingVPCPublicSubnetSubnet1SubnetE102A8F4": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/16",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "KinesisLoadTestingWithLocustStack/Load testing VPC/PublicSubnetSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "LoadtestingVPC470E256F",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "LoadtestingVPCVPCGWE9D04917": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "LoadtestingVPCIGW333C72B1",
        },
        "VpcId": Object {
          "Ref": "LoadtestingVPC470E256F",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "kinesisloadtestingwithlocustinstance56EDDEC9": Object {
      "CreationPolicy": Object {
        "ResourceSignal": Object {
          "Count": 1,
          "Timeout": "PT5M",
        },
      },
      "DependsOn": Array [
        "kinesislocustloadtestec2roleDefaultPolicyC60D7B98",
        "kinesislocustloadtestec2role2E226CA6",
      ],
      "Metadata": Object {
        "AWS::CloudFormation::Init": Object {
          "config": Object {
            "commands": Object {
              "000": Object {
                "command": "unzip load-test-assets.zip",
                "cwd": "/usr/local/load-test",
              },
              "001": Object {
                "command": "pip3 install --upgrade pip",
              },
              "002": Object {
                "command": "pip3 install -r requirements.txt",
                "cwd": "/usr/local/load-test",
              },
              "003": Object {
                "command": "PATH=/usr/local/bin:$PATH",
              },
            },
            "packages": Object {
              "yum": Object {
                "gcc": Array [],
                "python3-devel": Array [],
              },
            },
            "services": Object {
              "sysvinit": Object {
                "locust": Object {
                  "enabled": true,
                  "ensureRunning": true,
                },
              },
            },
          },
          "configSets": Object {
            "default": Array [
              "config",
            ],
          },
        },
      },
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "IamInstanceProfile": Object {
          "Ref": "kinesisloadtestingwithlocustinstanceInstanceProfileE095B9C3",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmarm64gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "c7g.xlarge",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "kinesisloadtestingwithlocustsg0D3CD02E",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "LoadtestingVPCPublicSubnetSubnet1SubnetE102A8F4",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "kinesis-load-testing-with-locust-instance",
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
mkdir -p $(dirname '/usr/local/load-test/load-test-assets.zip')
aws s3 cp 's3://",
                Object {
                  "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-eu-central-1",
                },
                "/2e1665d2bf9c57a5724ff1c911821aebe5cc0615554ac5fa46fda01a05e828b8.zip' '/usr/local/load-test/load-test-assets.zip'
mkdir -p $(dirname '/etc/systemd/system/locust.service')
aws s3 cp 's3://",
                Object {
                  "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-eu-central-1",
                },
                "/d5775109e5610c2612d93bbc93448f09f5c2046c3185bb679e810726c4cb98c9.service' '/etc/systemd/system/locust.service'
# fingerprint: 0c86fbeaae204c31
(
  set +e
  /opt/aws/bin/cfn-init -v --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource kinesisloadtestingwithlocustinstance56EDDEC9 -c default
  /opt/aws/bin/cfn-signal -e $? --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource kinesisloadtestingwithlocustinstance56EDDEC9
  cat /var/log/cfn-init.log >&2
)",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "kinesisloadtestingwithlocustinstanceInstanceProfileE095B9C3": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "kinesislocustloadtestec2role2E226CA6",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "kinesisloadtestingwithlocustsg0D3CD02E": Object {
      "Properties": Object {
        "GroupDescription": "KinesisLoadTestingWithLocustStack/kinesis-load-testing-with-locust-sg",
        "GroupName": "kinesis-load-testing-with-locust-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allows Locust Dashboard access from Internet",
            "FromPort": 8089,
            "IpProtocol": "tcp",
            "ToPort": 8089,
          },
        ],
        "VpcId": Object {
          "Ref": "LoadtestingVPC470E256F",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "kinesislocustloadtestec2role2E226CA6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonKinesisFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "kinesislocustloadtestec2roleDefaultPolicyC60D7B98": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-eu-central-1",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-eu-central-1",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "kinesislocustloadtestec2roleDefaultPolicyC60D7B98",
        "Roles": Array [
          Object {
            "Ref": "kinesislocustloadtestec2role2E226CA6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
